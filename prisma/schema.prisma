// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// --- User Model ---
model User {
  id           String        @id @default(uuid())
  username     String        @unique
  passwordHash String
  role         Role          @default(user)
  permissions  Json          @default("[]") // Store permissions as a JSON array of strings
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  transactions Transaction[] // Relation to Transaction model
  budgets      Budget[]      // Relation to Budget model

  @@map("users") // Explicitly map to 'users' table
}

enum Role {
  superadmin
  user
}

// --- Transaction Model ---
model Transaction {
  id          String          @id @default(uuid())
  userId      String // Foreign key to User model
  user        User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  type        TransactionType
  description String          @db.Text // Store original case, handle matching case-insensitively in application code
  amount      Decimal         @db.Decimal(12, 2) // Use Decimal for financial values
  date        DateTime        @db.Timestamp(3) // Use Timestamp for date and time
  createdAt   DateTime        @default(now())
  updatedAt   DateTime        @updatedAt

  @@map("transactions") // Explicitly map to 'transactions' table
}

enum TransactionType {
  income
  expense
}

// --- Budget Model ---
model Budget {
  id        String       @id @default(uuid())
  userId    String // Foreign key to User model
  user      User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  category  String       // Store original case, handle matching case-insensitively in application code
  amount    Decimal      @db.Decimal(12, 2)
  period    BudgetPeriod
  createdAt DateTime     @default(now())
  updatedAt DateTime     @updatedAt

  // Unique constraint for user, category (case-insensitive handled in application), and period
  // Note: DB level case-insensitive unique constraints are complex. We handle upsert logic in the action.
  @@unique([userId, category, period])
  @@map("budgets") // Explicitly map to 'budgets' table
}

enum BudgetPeriod {
  monthly
  yearly
}