// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  // Ensure the DATABASE_URL environment variable is set
  url      = env("DATABASE_URL")
}

// --- User Model ---
model User {
  id           String   @id @default(uuid())
  username     String   @unique // Ensure usernames are unique
  passwordHash String   @db.Text
  role         Role     @default(user) // Default role is 'user'
  permissions  Json     @default("[]") // Store permissions as JSON, defaulting to empty array
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt // Prisma automatically handles updated_at

  // Relations
  transactions Transaction[] // One user can have many transactions
  budgets      Budget[]      // One user can have many budgets
}

enum Role {
  superadmin
  user
}

// --- Transaction Model ---
model Transaction {
  id          String          @id @default(uuid())
  type        TransactionType // 'income' or 'expense'
  description String          @db.Text // Store original case, handle matching case-insensitively in application code
  amount      Decimal         @db.Decimal(12, 2) // Use Decimal for financial values
  date        DateTime        @db.Date // Store only the date part
  createdAt   DateTime        @default(now())
  updatedAt   DateTime        @updatedAt

  // Relations
  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade) // Cascade deletes transactions if user is deleted

  @@index([userId, date]) // Index for querying transactions by user and date
}

enum TransactionType {
  income
  expense
}

// --- Budget Model ---
model Budget {
  id       String       @id @default(uuid())
  category String       // Store original case, handle matching case-insensitively in application code
  amount   Decimal      @db.Decimal(12, 2)
  period   BudgetPeriod // 'monthly' or 'yearly'
  dueDate  DateTime?    @db.Date // Optional due date for the budget item
  createdAt DateTime     @default(now())
  updatedAt DateTime     @updatedAt

  // Relations
  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade) // Cascade deletes budgets if user is deleted

  // Unique constraint for user, category, and period to prevent duplicates
  @@unique([userId, category, period])
  @@index([userId, period]) // Index for querying budgets by user and period
}

enum BudgetPeriod {
  monthly
  yearly
}
